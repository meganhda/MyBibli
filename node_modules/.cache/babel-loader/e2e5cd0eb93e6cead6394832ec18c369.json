{"ast":null,"code":"var _jsxFileName = \"/Users/Megane/MonProjet/2019-l2aj2/trunk/2019-l2aj2/APP_Mac/src/components/Historique/historique.js\";\nimport React, { Component } from 'react';\nimport \"./historique.css\";\nimport { MDBTableBody, MDBTableHead, MDBTable } from \"mdbreact\";\nimport axios from 'axios';\nimport { Redirect } from 'react-router';\n\nclass Historic extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      noSession: false,\n      //booleen qui permet de verifier si la session de l'utilisateur est active, initialisé a \"faux\"\n      loading: true,\n      //booleen initialisé comme vrai, qui va changer lors de la récupération des données\n      historic: [],\n      //va contenir les anciens prêts\n      error: '' //va contenir l'erreur en cas d'erreur\n\n    };\n    this.checkSession = this.checkSession.bind(this);\n  } //Vérifie que la session est active\n\n\n  checkSession() {\n    axios.get(\"http://localhost:8888/API/Session/session.php\", {\n      withCredentials: true\n    }).then(function (response) {\n      console.log(response);\n    }).catch(error => {\n      if (error.response && error.response.status === 404) {\n        this.setState({\n          noSession: true\n        }); //s'il n'y a pas de session active, change la valeur du booleen comme \"vrai\"\n\n        console.log(error);\n      }\n    });\n  } //methode qui permet de récupérer les anciens prêts effectués via le fichier \"liste_historique.php\"\n\n\n  async componentDidMount() {\n    const url = \"http://localhost:8888/API/MesLivres/liste_historique.php\";\n    const response = await fetch(url, {\n      credentials: 'include'\n    });\n    const data = await response.json();\n    this.setState({\n      historic: data.results.livres,\n      loading: false\n    }); //\"historic\" contient les données reçues par le back-end\n\n    console.log(data.results.livres);\n  }\n\n  render() {\n    const {\n      noSession\n    } = this.state; //appel à la methode qui verifie la session\n\n    this.checkSession(); //s'il n'y a pas de session active, redirection vers la page de connexion\n\n    if (noSession) {\n      return React.createElement(Redirect, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      });\n    } //si le temps de récupération des données a afficher est long\n\n\n    if (this.state.loading) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"chargement...\");\n    } //s'il n'y a pas de prêt déjà enregistré dans la base de données\n\n\n    if (this.state.historic.length === 0) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"titleMyHistoric\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \" Mon historique des pr\\xEAts \"), React.createElement(\"div\", {\n        className: \"noHistoric\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"Aucun pr\\xEAt effectu\\xE9.\"));\n    } //affichage d'un tableau avec les prêts déja effectués, grâce a la fonction map qui va parcourir \"historic\"\n\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"titleMyHistoric\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \" Mon historique des pr\\xEAts \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(MDBTable, {\n      hover: true,\n      bordered: true,\n      scrollY: true,\n      maxHeight: \"400px\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(MDBTableHead, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Titre\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Auteur\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Emprunteur\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Date d'emprunt\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Date de rendu\"))), React.createElement(MDBTableBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, this.state.historic.map(livre => React.createElement(\"tr\", {\n      key: livre.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, livre.title), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, livre.author), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, livre.borrower), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, livre.date1), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, livre.date2))))));\n  }\n\n}\n\nexport default Historic;","map":{"version":3,"sources":["/Users/Megane/MonProjet/2019-l2aj2/trunk/2019-l2aj2/APP_Mac/src/components/Historique/historique.js"],"names":["React","Component","MDBTableBody","MDBTableHead","MDBTable","axios","Redirect","Historic","constructor","props","state","noSession","loading","historic","error","checkSession","bind","get","withCredentials","then","response","console","log","catch","status","setState","componentDidMount","url","fetch","credentials","data","json","results","livres","render","length","map","livre","id","title","author","borrower","date1","date2"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport \"./historique.css\";\nimport { MDBTableBody, MDBTableHead, MDBTable } from \"mdbreact\";\nimport axios from 'axios';\nimport { Redirect} from 'react-router';\n\nclass Historic extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            noSession: false,//booleen qui permet de verifier si la session de l'utilisateur est active, initialisé a \"faux\"\n            loading: true,//booleen initialisé comme vrai, qui va changer lors de la récupération des données\n            historic: [],//va contenir les anciens prêts\n            error: '',//va contenir l'erreur en cas d'erreur\n        }\n        this.checkSession = this.checkSession.bind(this);\n    }\n\n    //Vérifie que la session est active\n    checkSession () {\n        axios.get(\"http://localhost:8888/API/Session/session.php\", {withCredentials: true})\n\n        .then(function(response){\n        console.log(response);\n        })\n\n        .catch((error) => {\n            if(error.response && error.response.status=== 404){\n                this.setState({noSession: true});//s'il n'y a pas de session active, change la valeur du booleen comme \"vrai\"\n                console.log(error);\n            }\n        });\n    }\n\n    //methode qui permet de récupérer les anciens prêts effectués via le fichier \"liste_historique.php\"\n    async componentDidMount() {\n        const url = \"http://localhost:8888/API/MesLivres/liste_historique.php\";\n        const response = await fetch(url,{credentials: 'include'});\n        const data = await response.json();\n        this.setState({historic: data.results.livres, loading: false})//\"historic\" contient les données reçues par le back-end\n        console.log(data.results.livres);\n      }\n\n\n    render() {\n\n        const {noSession} = this.state;\n\n         //appel à la methode qui verifie la session\n         this.checkSession ();\n\n         //s'il n'y a pas de session active, redirection vers la page de connexion\n         if(noSession){\n           return <Redirect to=\"/\"/>;\n         }\n\n        //si le temps de récupération des données a afficher est long\n        if(this.state.loading){\n            return <div>chargement...</div>;\n        }\n\n        //s'il n'y a pas de prêt déjà enregistré dans la base de données\n        if (this.state.historic.length === 0){\n            return (\n              <div>\n                <h1 className=\"titleMyHistoric\"> Mon historique des prêts </h1>\n                <div className=\"noHistoric\">\n                  Aucun prêt effectué.\n                </div>\n              </div>  \n            );\n        } \n\n        //affichage d'un tableau avec les prêts déja effectués, grâce a la fonction map qui va parcourir \"historic\"\n        return(\n            <div> \n\n                <h1 className=\"titleMyHistoric\"> Mon historique des prêts </h1>\n\n                <br></br>\n\n                <MDBTable hover bordered scrollY maxHeight=\"400px\">\n                    <MDBTableHead>\n                    <tr>\n                    <th>Titre</th>\n                    <th>Auteur</th>\n                    <th>Emprunteur</th>\n                    <th>Date d'emprunt</th>\n                    <th>Date de rendu</th>\n                    </tr>\n                    </MDBTableHead>\n                    <MDBTableBody>\n                    {\n                        this.state.historic.map(livre => (\n                        <tr key={livre.id} >\n                            <td>{livre.title}</td>\n                            <td>{livre.author}</td>\n                            <td>{livre.borrower}</td>\n                            <td>{livre.date1}</td>\n                            <td>{livre.date2}</td>\n                        </tr>\n                        ))\n                    }\n                    </MDBTableBody>\n                </MDBTable>\n\n            </div>\n        );\n    }\n}\n        \n export default Historic;\n        "]},"metadata":{},"sourceType":"module"}